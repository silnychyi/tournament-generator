{"version":3,"sources":["img/preloader.gif","components/GridTiles.js","components/Grid.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GridTiles","this","props","grid","people","cars_per_race","winners_per_race","className","length","map","stage","i","key","flat","Array","from","Math","ceil","_","slice","b","group","j","driver","k","type","Component","Grid","state","inputs","pdfPreparing","savePDF","printArea","document","querySelector","html2canvas","then","canvas","pdfHeight","pdfWidth","imgData","toDataURL","pdf","jsPDF","orientation","imgProps","getImageProperties","height","width","internal","pageSize","getWidth","getHeight","addImage","save","setState","body","style","position","getModelsRent","people_arr","push","console","log","forEach","item","nums_of_low_races","grid_stage","grid_group","name","floor","gridInit","a","c","isNaN","parseInt","src","require","alt","onChange","e","target","validity","valid","value","onBlur","pattern","disabled","onClick","setTimeout","ref","el","componentRef","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f9a3c5a9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/preloader.9eb38563.gif\";","import React, { Component } from 'react'\n\nexport class GridTiles extends Component {\n    render() {\n        const { grid, people, cars_per_race, winners_per_race } = this.props\n        return (\n            <div className=\"grid-overlay\">\n                {grid.length !== 0 && people !== '' && cars_per_race !== '' && winners_per_race !== '' ?\n                    <div className=\"grid-wrap\">\n\n                        \n\n\n                        {grid.map((stage, i)=>{\n\n                            \n                            return (\n                            <div key={i} className=\"grid-stage\">\n                                <div className=\"grid-stage-title\">\n                                <div className=\"stage-title-num\">\n                                    {grid.length-1 === i ? \"Final\" : (grid.length-2 === i ? \"Semi-Final\" : `Tour ${i+1}`)}\n                                </div>\n                                <div className=\"stage-title-subline\">{`Participants: ${stage.flat(3).length}`}</div>\n                                <div className=\"stage-title-subline\">{`Groups: ${stage.length}`}</div>\n                                </div>\n\n                                {stage.length > 8 ?\n                                \n                            \n                                <div className=\"grid-stage-list-wrap\">\n\n                                    {Array.from({length: Math.ceil(stage.length/8)}, (_,i)=>{\n\n                                        return stage.slice(i*8, (i*8)+8)\n                                    }).map((stage, b)=>{\n\n                                        return (\n                                        \n                                            <div key={b} className=\"grid-stage-list\">\n                                                {stage.map((group, j)=>{\n                                                    return (\n                                                        <div key={j} className=\"grid-group\">\n                                                            {group.map((driver, k)=>{\n                                                                return (\n                                                                <div key={k} className=\"grid-driver-wrapper\">\n                                                                    <div className=\"grid-driver-num\">\n                                                                    {k+1}\n                                                                    </div>\n                                                                    <input \n                                                                        className=\"grid-driver\"\n                                                                        type=\"text\"\n                                                                    />\n                                    \n                                                                    \n                                                                </div>\n                                                                )\n                                                            })}\n                                                        </div>\n                                                    )\n                                                })}\n                                            </div>\n                                        )\n                                    })}\n\n                                </div>\n                            \n                                :\n                                <div className=\"grid-stage-list-wrap\">\n                                    \n                                    <div className=\"grid-stage-list\">\n                                        {stage.map((group, j)=>{\n                                            return (\n                                                <div key={j} className=\"grid-group\">\n                                                    {group.map((driver, k)=>{\n                                                        return (\n                                                        <div key={k} className=\"grid-driver-wrapper\">\n                                                            <div className=\"grid-driver-num\">\n                                                            {k+1}\n                                                            </div>\n                                                            <input \n                                                                className=\"grid-driver\"\n                                                                type=\"text\"\n                                                            />\n                            \n                                                            \n                                                        </div>\n                                                        )\n                                                    })}\n                                                </div>\n                                            )\n                                        })}\n                                    </div>\n                                </div>\n                            }\n\n                            </div>\n                            )\n                        })}\n                    </div>\n                :null}\n            </div>\n        )\n    }\n}\n\nexport default GridTiles\n","import React, { Component } from 'react'\nimport '../css/Grid.css'\nimport GridTiles from './GridTiles'\nimport html2canvas from 'html2canvas';\nimport jsPDF from 'jspdf';\n\n\nexport class Grid extends Component {\n\n\n    \n\n  state = {\n    inputs: {\n      people: 0,\n      cars_per_race: '',\n      winners_per_race: ''\n    },\n\n    grid: [],\n\n    pdfPreparing: false\n  }\n\n\n\n  savePDF = (people) => {\n\n      const printArea = document.querySelector(\".grid-wrap\");\n\n      html2canvas(printArea)\n      .then(canvas => {\n\n          const imgData = canvas.toDataURL('image/png');\n          const pdf = new jsPDF({\n              orientation: 'portrait',\n          });\n          const imgProps= pdf.getImageProperties(imgData);\n          let pdfHeight, pdfWidth\n          if (imgProps.height/imgProps.width < 1.45 ){\n              pdfWidth = pdf.internal.pageSize.getWidth();\n              pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;\n          } else {\n              pdfHeight = pdf.internal.pageSize.getHeight();\n              pdfWidth = (imgProps.width * pdfHeight) / imgProps.height;\n          }\n          pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight );\n          pdf.save(`grid-${people}.pdf`);\n\n      })\n      .then(()=>{\n          this.setState({pdfPreparing: false})\n\n          document.body.style.position = \"relative\"\n      })\n\n  }\n\n\n\n  \n  \n  getModelsRent = (people, cars_per_race, winners_per_race) => {\n\n    let models_total = 0\n    let people_arr = []\n    people_arr.push(people)\n    \n    while (people_arr[people_arr.length-1] > cars_per_race) {\n      models_total = models_total + people_arr[people_arr.length-1]\n      if(people_arr[people_arr.length-1] !== Math.ceil(people_arr[people_arr.length-1]/cars_per_race) * winners_per_race){\n        people_arr[people_arr.length] = Math.ceil(people_arr[people_arr.length-1]/cars_per_race) * winners_per_race\n\n      }\n      else break\n\n    }\n\n    console.log(people_arr)\n    let grid = []\n\n\n    people_arr.forEach((item)=>{\n        \n      if(item/cars_per_race > 2 && item/cars_per_race < 2.5){\n          cars_per_race = cars_per_race-1\n      }\n\n      let nums_of_low_races\n      if (item % cars_per_race === 0 || item < cars_per_race ) {\n        \n        nums_of_low_races = 0\n      } else {\n        nums_of_low_races = cars_per_race-(item % cars_per_race)\n      }\n      \n      let grid_stage = []\n      for (let i = 0; i < (item-(nums_of_low_races*(cars_per_race-1)))/cars_per_race; i++) {\n        let grid_group = []\n        if(item >= cars_per_race){\n\n          for (let j = 0; j < cars_per_race; j++) {\n            let driver = {\n              name: ''\n            }\n            grid_group.push(driver)\n            \n          }\n          grid_stage.push(grid_group)\n        } else {\n          for (let j = 0; j < item; j++) {\n            let driver = {\n              name: ''\n            }\n            grid_group.push(driver)\n            \n          }\n          grid_stage.push(grid_group)\n        }\n      }\n\n      if (item/cars_per_race <= 1.5 && item/cars_per_race > 1) {\n\n          if(item%2 === 0){\n              for (let i = 0; i < 2; i++) {\n                  let grid_group = []\n                  for (let j = 0; j < item/2; j++) {\n                      let driver = {\n                        name: ''\n                      }\n                      grid_group.push(driver)\n                      \n                    }\n                    grid_stage.push(grid_group)\n              }\n          } else {\n\n              let grid_group = []\n              for (let j = 0; j < Math.floor(item/2); j++) {\n                  let driver = {\n                      name: ''\n                  }\n                  grid_group.push(driver)\n              \n              }\n              grid_stage.push(grid_group)\n\n\n              grid_group = []\n              for (let j = 0; j < Math.ceil(item/2); j++) {\n                  let driver = {\n                      name: ''\n                  }\n                  grid_group.push(driver)\n              \n              }\n              grid_stage.push(grid_group)\n          }\n          \n\n      } else {\n\n        for (let i = 0; i < nums_of_low_races; i++) {\n          let grid_group = []\n          for (let j = 0; j < cars_per_race-1; j++) {\n              let driver = {\n                name: ''\n              }\n              grid_group.push(driver)\n              \n            }\n            grid_stage.push(grid_group)\n        }\n      }        \n\n      grid.push(grid_stage)\n\n\n      this.setState({grid})\n\n    })\n  }\n\n\n  gridInit = (a,b,c) => {\n\n    if(!isNaN(a) && !isNaN(b) && !isNaN(c) && a!==0 && b!==0 && c!==0 && a!=='' && b!=='' && c!==''){\n      this.getModelsRent(parseInt(a),parseInt(b),parseInt(c))\n    }\n  }\n\n  render() {\n\n    const { people, cars_per_race, winners_per_race } = this.state.inputs\n    const { grid, pdfPreparing } = this.state\n\n    \n    return (\n      <div className=\"Grid\">\n          {pdfPreparing ?\n              <div className=\"pdf-preparing\">\n                  <p>Your file is being prepared</p>\n                  <img\n                      className=\"preloader\"\n                      src={require(\"../img/preloader.gif\")}\n                      alt=\"\"\n                  />\n              </div>\n          :null}\n\n        <div className=\"inputs_list\">\n\n          <div className=\"input_wrap\">\n            <div className=\"input-label\">\n              participants\n            </div>\n            <input\n              onChange={(e)=>{\n                  if (e.target.validity.valid){\n                      this.setState({\n                          inputs: {\n                              ...this.state.inputs,\n                              people: e.target.value,\n                              cars_per_race: ''\n                          }\n                      })\n                      this.gridInit(e.target.value, cars_per_race, winners_per_race)\n                  }\n              }}\n\n              onBlur={(e)=>{\n                  if (e.target.value === ''){\n                      this.setState({\n                          inputs: {\n                              ...this.state.inputs,\n                              people: 0,\n                              cars_per_race: ''\n                          }\n                      })\n                  }\n\n              }}\n              value={this.state.inputs.people}\n              className=\"input-settings\"\n              type=\"tel\"\n              pattern=\"^-?[0-9]\\d*\\.?\\d*$\"\n            />\n          </div>\n\n\n          <div className=\"input_wrap\">\n            <div className=\"input-label\">\n              group max \n            </div>\n            <div className=\"select-wrap\">\n              <select\n                onChange={(e)=>{\n                  this.setState({\n                    inputs: {\n                      ...this.state.inputs,\n                      cars_per_race: e.target.value\n                    }\n                  })\n                  this.gridInit(people, e.target.value, winners_per_race)\n                }}\n                value={this.state.inputs.cars_per_race}\n                className=\"select-settings\"\n              > \n                <option disabled={true} value=\"\">0</option>\n                <option disabled={parseInt(people)/4 <= 1.5 ? true : (typeof cars_per_race === 'string' ? false: true)} value=\"4\">4</option>\n                <option disabled={parseInt(people)/5 <= 1.5 ? true : (typeof cars_per_race === 'string' ? false: true)} value=\"5\">5</option>\n                <option disabled={parseInt(people)/6 <= 1.5 ? true : (typeof cars_per_race === 'string' ? false: true)} value=\"6\">6</option>\n              </select>\n            </div>\n          </div>\n            {people/cars_per_race < 2}\n          <div className=\"input_wrap\">\n            <div className=\"input-label\">\n              winners per group \n            </div>\n            <div className=\"select-wrap\">\n              <select\n                onChange={(e)=>{\n                  this.setState({\n                    inputs: {\n                      ...this.state.inputs,\n                      winners_per_race: e.target.value\n                    }\n                  })\n                  this.gridInit(people, cars_per_race, e.target.value)\n                }}\n                value={this.state.inputs.winners_per_race}\n                className=\"select-settings\"\n              >\n                <option disabled={true} value=\"\">0</option>\n                <option value=\"1\">1</option>\n                <option value=\"2\">2</option>\n              </select>\n            </div>\n          </div>\n          \n          {grid.length !== 0 && people !== '' && cars_per_race !== '' && winners_per_race !== '' ?\n              <button \n                  className=\"generate-pdf\"\n                  onClick={()=>{\n                      this.setState({pdfPreparing: true})\n                      document.body.style.position = \"fixed\"\n\n                      setTimeout(()=>{\n                          this.savePDF(people)\n                      }, 1000)\n                      \n                  }}\n              >\n                  download\n                  <span>\n                      <i className=\"far fa-file-pdf\"></i>\n                  </span>\n                  PDF\n              </button>\n          :null}\n\n        </div>\n        <GridTiles\n          ref={el => (this.componentRef = el)}\n          people={people}\n          cars_per_race={cars_per_race}\n          winners_per_race={winners_per_race}\n          grid={grid}\n        />\n\n      </div>\n    );\n  }\n  }\n  \n  export default Grid\n","import React, { Component } from 'react'\nimport './App.css'\nimport Grid from './components/Grid'\n\n\nexport class App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Grid />\n      </div>\n    );\n  }\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}